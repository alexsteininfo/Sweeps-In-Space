setwd("/Users/stein02/Desktop/upload/Figures/supp_4/")
df <- read_csv("numerical_data/sweep probability vs speed ratio c_wt 0.152 mutation rate 2.34e-06 simplifying assumption 0 2.csv")
df <- rename(df, c("ratio"="Speed ratio", "twodim"="2D", "threedim"="3D"))
# Some converting things
df$twodim <- as.complex(df$twodim)
df$twodim <- Re(df$twodim)
df$threedim <- as.complex(df$threedim)
df$threedim <- Re(df$threedim)
### Create vectors for plotting
c_wt <- 0.15
mu <- 0.23*10^(-5)
c_m <- 0:100/10*c_wt
p_approx <- (c_m-c_wt)^3/c_m^3
p_approx_2D <- (c_m-c_wt)^2/c_m^2
v <- c_m/c_wt
beta <- sqrt(v^2-1)
p_antal <- ((9+beta^2)/beta^2)*2/(1+exp(3*pi/beta))
x0=5
p_const1 <- exp(-mu*pi*x0^4/c_m)
x0=10
p_const10 <- exp(-mu*pi*x0^4/c_m)
x0=20
p_const100 <- exp(-mu*pi*x0^4/c_m)
p_exp <- s_m
j <-1
for (s in s_m){
r_wt = 1.0
r_m = r_m_1[j]
chi = 0.95
u = 1e-5
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp[j] <- sol$value
j <- j+1
}
#xaxis <- s_m/s_wt
xaxis <- c_m
legend_1 <- "dispersal throughout"
legend_2 <- "boundary growth"
legend_3 <- "fixed population size"
cols <- brewer.pal(12,"Paired")
colours <- t(c(cols[8],cols[10],cols[6]))
colnames(colours) <- c(legend_1, legend_2, legend_3)
lty <- t(c("solid", "solid", "solid"))
colnames(lty) <- c(legend_1, legend_2, legend_3)
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.15), legend.title = element_blank()) #+
fig <- ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.15), legend.title = element_blank()) #+
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.8), legend.title = element_blank()) #+
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.9), legend.title = element_blank()) #+
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.85), legend.title = element_blank()) #+
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.8), legend.title = element_blank()) #+
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.85), legend.title = element_blank()) #+
fig <- ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.85), legend.title = element_blank()) #+
a = 1.5
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepAlt.png", fig, width = 4^a, height = 3^a)
fig <- ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.82), legend.title = element_blank()) #+
a = 1.5
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepAlt.png", fig, width = 4^a, height = 3^a)
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.82), legend.title = element_blank()) #+
x0=10
p_const1 <- exp(-mu*pi*x0^4/c_m)
x0=15
p_const10 <- exp(-mu*pi*x0^4/c_m)
x0=20
p_const100 <- exp(-mu*pi*x0^4/c_m)
p_exp <- s_m
j <-1
for (s in s_m){
r_wt = 1.0
r_m = r_m_1[j]
chi = 0.95
u = 1e-5
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp[j] <- sol$value
j <- j+1
}
#xaxis <- s_m/s_wt
xaxis <- c_m
legend_1 <- "dispersal throughout"
legend_2 <- "boundary growth"
legend_3 <- "fixed population size"
cols <- brewer.pal(12,"Paired")
colours <- t(c(cols[8],cols[10],cols[6]))
colnames(colours) <- c(legend_1, legend_2, legend_3)
lty <- t(c("solid", "solid", "solid"))
colnames(lty) <- c(legend_1, legend_2, legend_3)
ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.82), legend.title = element_blank()) #+
fig <- ggplot() +
#geom_line(aes(x=xaxis, y=p_approx, linetype=legend_1, color=legend_1), linewidth=1.5) +
geom_line(aes(x=df$ratio*c_wt, y=df$threedim, linetype=legend_1, color=legend_1), size=1.5) +
geom_line(aes(x=xaxis, y=p_antal, color=legend_2), linewidth=1.5) +
geom_line(aes(x=xaxis, y=p_const1, color=legend_3), linewidth=1.5, linetype="12") +
geom_line(aes(x=xaxis, y=p_const10, color=legend_3), linewidth=1.5, linetype="22") +
geom_line(aes(x=xaxis, y=p_const100, color=legend_3), linewidth=1.5, linetype="solid") +
#geom_vline(xintercept=0.15, linewidth=2.0, linetype="12") +
scale_color_manual(values = colours, limits = c(legend_1, legend_2, legend_3)) +
scale_linetype_manual(values = lty, limits = c(legend_1, legend_2, legend_3)) +
labs(x="mutant speed, *c<sub>m*", y="Pr(sweep)") +
#xlim(1,10) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.82), legend.title = element_blank()) #+
a = 1.5
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepAlt.png", fig, width = 4^a, height = 3^a)
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepAlt.png", fig, width = 4^a, height = 3^a)
library("tidyverse")
library("ggtext")
library("RColorBrewer")
r_wt <- 0.01
r_m_1 <- 1:100*r_wt
chi = 0.99
p_exp1 <- r_m_1
p_exp2 <- r_m_1
p_exp3 <- r_m_1
j <-1
for (r_m in r_m_1){
#r_m = r_m_1[j]
### PLot number 1
u = 1e-4
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp1[j] <- sol$value
### Plot number 2
u = 1e-5
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp2[j] <- sol$value
### Plot number 3
u = 1e-6
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp3[j] <- sol$value
j <- j+1
}
### Plot Lenski formula
selCoefficient <- (r_m_1-r_wt)/r_wt
N0 = 50000
p_logistic1 <- exp(-1e-4*N0/selCoefficient*log(N0))
p_logistic2 <- exp(-1e-5*N0/selCoefficient*log(N0))
p_logistic3 <- exp(-1e-6*N0/selCoefficient*log(N0))
#xaxis <- s_m/s_wt
xaxis <- r_m_1 #/r_wt
legend_1 <- "exponential growth"
legend_2 <- "fixed population size"
cols <- brewer.pal(12,"Paired")
lcol <- t(c(cols[4], cols[12]))
colnames(lcol) <- c(legend_1, legend_2)
ggplot() +
geom_line(aes(x=xaxis, y=p_exp1, color=legend_1), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_exp2, color=legend_1), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_exp3, color=legend_1), linewidth=1.5, linetype = "12") +
geom_line(aes(x=xaxis, y=p_logistic1, color=legend_2), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_logistic2, color=legend_2), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_logistic3, color=legend_2), linewidth=1.5, linetype = "12") +
#scale_linetype_manual(values = lty) +
scale_color_manual(values = lcol, limits = c(legend_1, legend_2)) +
labs(x="mutant fitness, *r<sub>m*", y="Pr(sweep)") +
xlim(0.01,0.5) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.48), legend.title = element_blank(),
legend.text = element_markdown())
fig <- ggplot() +
geom_line(aes(x=xaxis, y=p_exp1, color=legend_1), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_exp2, color=legend_1), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_exp3, color=legend_1), linewidth=1.5, linetype = "12") +
geom_line(aes(x=xaxis, y=p_logistic1, color=legend_2), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_logistic2, color=legend_2), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_logistic3, color=legend_2), linewidth=1.5, linetype = "12") +
#scale_linetype_manual(values = lty) +
scale_color_manual(values = lcol, limits = c(legend_1, legend_2)) +
labs(x="mutant fitness, *r<sub>m*", y="Pr(sweep)") +
xlim(0.01,0.5) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.48), legend.title = element_blank(),
legend.text = element_markdown())
a = 1.5
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepExp90.png", fig, width = 4^a, height = 3^a)
chi = 0.95
p_exp1 <- r_m_1
p_exp2 <- r_m_1
p_exp3 <- r_m_1
j <-1
for (r_m in r_m_1){
#r_m = r_m_1[j]
### PLot number 1
u = 1e-4
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp1[j] <- sol$value
### Plot number 2
u = 1e-5
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp2[j] <- sol$value
### Plot number 3
u = 1e-6
integrand <- function(t) {u*exp(r_wt*t -
u/r_wt*
exp( (r_wt*(r_m*t-log(1/chi-1)))/
(r_m-r_wt) )
)}
sol <- integrate(integrand, lower = 0, upper = Inf)
p_exp3[j] <- sol$value
j <- j+1
}
### Plot Lenski formula
selCoefficient <- (r_m_1-r_wt)/r_wt
N0 = 50000
p_logistic1 <- exp(-1e-4*N0/selCoefficient*log(N0))
p_logistic2 <- exp(-1e-5*N0/selCoefficient*log(N0))
p_logistic3 <- exp(-1e-6*N0/selCoefficient*log(N0))
#xaxis <- s_m/s_wt
xaxis <- r_m_1 #/r_wt
legend_1 <- "exponential growth"
legend_2 <- "fixed population size"
cols <- brewer.pal(12,"Paired")
lcol <- t(c(cols[4], cols[12]))
colnames(lcol) <- c(legend_1, legend_2)
ggplot() +
geom_line(aes(x=xaxis, y=p_exp1, color=legend_1), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_exp2, color=legend_1), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_exp3, color=legend_1), linewidth=1.5, linetype = "12") +
geom_line(aes(x=xaxis, y=p_logistic1, color=legend_2), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_logistic2, color=legend_2), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_logistic3, color=legend_2), linewidth=1.5, linetype = "12") +
#scale_linetype_manual(values = lty) +
scale_color_manual(values = lcol, limits = c(legend_1, legend_2)) +
labs(x="mutant fitness, *r<sub>m*", y="Pr(sweep)") +
xlim(0.01,0.5) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.48), legend.title = element_blank(),
legend.text = element_markdown())
fig <- ggplot() +
geom_line(aes(x=xaxis, y=p_exp1, color=legend_1), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_exp2, color=legend_1), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_exp3, color=legend_1), linewidth=1.5, linetype = "12") +
geom_line(aes(x=xaxis, y=p_logistic1, color=legend_2), linewidth=1.5, linetype = "solid") +
geom_line(aes(x=xaxis, y=p_logistic2, color=legend_2), linewidth=1.5, linetype = "22") +
geom_line(aes(x=xaxis, y=p_logistic3, color=legend_2), linewidth=1.5, linetype = "12") +
#scale_linetype_manual(values = lty) +
scale_color_manual(values = lcol, limits = c(legend_1, legend_2)) +
labs(x="mutant fitness, *r<sub>m*", y="Pr(sweep)") +
xlim(0.01,0.5) + ylim(0,1) +
theme_bw(base_size = 25) +
theme(axis.title.x = element_markdown(), axis.title.y = element_markdown(),
legend.position = c(0.74,0.48), legend.title = element_blank(),
legend.text = element_markdown())
a = 1.5
ggsave("/Users/stein02/Desktop/upload/Figures/Figure_4_new/SweepExp90.png", fig, width = 4^a, height = 3^a)
library(dplyr)
library(tidyr)
library(ggplot2)
library(viridis)
library(RColorBrewer)
library(hrbrthemes)
plot_heatmap <- function(df, which_speed) {
my_limits <- c(-2.85, 1.6)
deme.labs <- paste0("deme size = ", as.character(2^unique(df$log2_deme)))
names(deme.labs) <- as.character(unique(df$log2_deme))
if(which_speed == "early") df$z <- log10(df$mean_speed_early)
else if(which_speed == "FKPP_speed") df$z <- log10(df$FKPP_speed)
else if(which_speed == "FKPP_adjusted_speed") df$z <- log10(df$FKPP_adjusted_speed)
else if(which_speed == "our_speed") df$z <- log10(df$our_speed)
else df$z <- log10(df$mean_speed_late)
df |> ggplot(aes(migration_rate, s_driver_birth, fill = z)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE, option="magma", limits = my_limits) +
facet_wrap(~log2_deme, labeller = labeller(log2_deme = deme.labs)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
labs(fill = "speed")
}
plot_deviations <- function(df, which_speed) {
deme.labs <- paste0("deme size = ", as.character(2^unique(df$log2_deme)))
names(deme.labs) <- as.character(unique(df$log2_deme))
if(which_speed == "FKPP_speed") df$z <- df$FKPP_deviation
else if(which_speed == "FKPP_adjusted_speed") df$z <- df$FKPP_adjusted_deviation
else if(which_speed == "our_speed") df$z <- df$our_deviation
else if(which_speed == "best") df$z <- pmin(abs(df$FKPP_deviation), abs(df$our_deviation), abs(df$FKPP_adjusted_deviation), na.rm = TRUE)
df |> ggplot(aes(migration_rate, s_driver_birth, fill = z)) +
geom_tile() +
scale_fill_viridis(discrete=FALSE, option="magma") + #, limits = my_limits) +
facet_wrap(~log2_deme, labeller = labeller(log2_deme = deme.labs)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
labs(fill = "speed deviation")
}
plot_best_prediction <- function(df) {
deme.labs <- paste0("deme size = ", as.character(2^unique(df$log2_deme)))
names(deme.labs) <- as.character(unique(df$log2_deme))
df$z <- ifelse(abs(df$FKPP_deviation) > abs(df$our_deviation), "our model", "FKPP")
df |> ggplot(aes(migration_rate, s_driver_birth, fill = z)) +
geom_tile() +
facet_wrap(~log2_deme, labeller = labeller(log2_deme = deme.labs)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
labs(fill = "speed deviation")
}
plot_best_prediction_quant <- function(df) {
deme.labs <- paste0("deme size = ", as.character(2^unique(df$log2_deme)))
names(deme.labs) <- as.character(unique(df$log2_deme))
df$z <- abs(df$FKPP_deviation) - abs(df$our_deviation)
df |> ggplot(aes(migration_rate, s_driver_birth, fill = z)) +
geom_tile() +
scale_fill_gradient2() +
facet_wrap(~log2_deme, labeller = labeller(log2_deme = deme.labs)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) +
labs(fill = "our model advantage")
}
### Simulation data
param_mut <- read_csv("mutant speed/params_mut.csv")
meas_mut <- read_csv("mutant speed/mut_speeds.csv")
param_wt <- read_csv("wildtype speed/params_wt.csv")
meas_wt <- read_csv("wildtype speed/wt_speeds.csv")
# Merge the parameters with the data dataframe
df_mut <- merge(meas_mut, param_mut, by.x = "id" , by.y = "index" )
df_wt <- merge(meas_wt, param_wt, by.x = "id" , by.y = "index" )
s_val = 2
pdf(paste0("curves_s=", s_val, ".pdf"), width=8, height=8)
ggplot(filter(df_mut2, s_driver_birth == s_val)) +
geom_point(aes(x = log2_deme, y = mean_speed_late)) +
geom_line(aes(x = log2_deme, y = our_speed), data = filter(df_mut2, s_driver_birth == s_val, !is.na(our_speed)), color = "blue") +
geom_line(aes(x = log2_deme, y = FKPP_speed), color = "orange") +
geom_line(aes(x = log2_deme, y = FKPP_adjusted_speed), color = "red") +
scale_y_log10(limits = c(0.001, 100)) +
facet_wrap(~migration_rate, labeller = labeller(migration_rate = mig.labs)) +
labs(x = "deme size", y = "propagation speed") +
scale_x_continuous(breaks = c(2, 4, 6, 8), labels = 2^c(2,4,6,8))
dev.off()
